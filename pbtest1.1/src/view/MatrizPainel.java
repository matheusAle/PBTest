/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.RoteiroDeTesteController;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import model.CasoDeTeste;
import model.RoteiroDeTestes;

/**
 *
 * @author matheus
 */
public class MatrizPainel extends javax.swing.JPanel implements Painel{
    
    private RoteiroDeTestes roteiro;
    private Map<?, ?> dados;

    /**
     * Creates new form MatrizPainel
     */
    public MatrizPainel() {
        initComponents();
    }
    public void carregarMatriz(){
        HashMap<String, ListaEncadeada<CasoDeTeste>> mapa = new HashMap<>();
        RoteiroDeTesteController.carregarCasosDeTesteDoRoteiro(roteiro);
        for (CasoDeTeste ct : roteiro.getCasosDeTeste()){ // mapeia os casos de teste com seis artefatos
            String nomeArtefato = ct.getArtefatoDeTeste().getNomeArquivo();
            if (mapa.containsKey(nomeArtefato)) {
                mapa.put(nomeArtefato, mapa.get(nomeArtefato).add(ct));
            } else {
                mapa.put(nomeArtefato, new ListaEncadeada<CasoDeTeste>().add(ct));
            }
        }

        Object [][] data = new Object[mapa.size()][roteiro.getCasosDeTeste().size()+1];
        for (int i = 0; i < data.length; i++){ // carrega uma matriz com objetos vazios
            for (int x = 0; x < data[i].length; x++){
                data[i][x] = " ";
            }
        }

        String nomes[] = new String[mapa.keySet().size()];
        mapa.keySet().toArray(nomes); // cria um array com o nome dos artefatos

        String nomesColuna[] = new String[roteiro.getCasosDeTeste().size()+1];
        nomesColuna[0] = "Artefatos";
        for (int row = 0, col = 1; row < nomes.length; row++){
            LinkedList<CasoDeTeste> lista = mapa.get(nomes[row]).getLista();
            data[row][0] = nomes[row]; // a primeira coluna da linha Ã© o nome do artefato
            for(int i = 1; i < col; data[row][i++] = " "); // preeenche as lacunas do
            for (CasoDeTeste ct : lista){
                nomesColuna[col] = ct.getSrcCasoDeTeste();
                data[row][col++] = ct.getResultado().contains("OK") ? "OK" : "ERR";
            }
        }
        
        tabela = new JTable(data, nomesColuna);
        tabela.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    JLabel l = new JLabel(String.valueOf(value));
                    l.setVerticalAlignment(l.CENTER);
                    l.setHorizontalAlignment(l.CENTER);
                    l.setSize(500, 75);
                    l.setFont(new java.awt.Font("Ubuntu", 0, 16));
                    if (((String)value).equals("OK")){
                        l.setForeground(Color.GREEN);
                    }else if (((String)value).equals("ERR")){
                        l.setForeground(Color.RED);
                    }
                    l.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            System.out.println((String)value + ", " +row+ ", "+column);
                        }
                    });
                    return l;
                }
                
            });
        tabela.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        
        jScrollPane1 = new JScrollPane(tabela);
        super.removeAll();
        super.add(jScrollPane1);
        super.revalidate();
    }
    
     private String toHeader(CasoDeTeste c){
        String i = String.format("<html><Strong>Nome</strong>: %s<br>", c.getNome());
        i = i.concat(String.format("<Strong>Codigo</strong>: %s<br>", c.getCodigo()));
        return i.concat(String.format("<Strong>Classe</strong>: %s<br></html>", c.getSrcCasoDeTeste()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();

        setLayout(new java.awt.GridLayout(1, 1));

        tabela.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        tabela.setForeground(new java.awt.Color(102, 102, 102));
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabela.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabela.setGridColor(new java.awt.Color(204, 204, 204));
        tabela.setIntercellSpacing(new java.awt.Dimension(10, 10));
        tabela.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tabela.setSelectionForeground(new java.awt.Color(51, 51, 51));
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabela);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables

    @Override
    public void preProcessamentoAntesDeAbrir() {
        roteiro = (RoteiroDeTestes) dados.get("roteiro");
        carregarMatriz();
    }

    @Override
    public void preProcessamentoAntesDeFechar() {
    }

    @Override
    public Component getCompomenteRaiz() {
        return this;
    }

    @Override
    public TipoDePainel pegarTipoDePainel() {
        return TipoDePainel.NULO;
    }

    @Override
    public void btnNovoOnClick(MouseEvent e) {
    }

    @Override
    public void btnSalvarOnClick(MouseEvent e) {
    }

    @Override
    public void btnCancelarOnClick(MouseEvent e) {
    }

    @Override
    public void btnLimparOnClick(MouseEvent e) {
    }

    @Override
    public void setData(Map<?, ?> dados) {
        this.dados = dados;
    }

     class ListaEncadeada<T> {
        LinkedList<T> lista;

        ListaEncadeada(){
            lista = new LinkedList<T>();
        }

        public LinkedList<T> getLista() {
            return lista;
        }

        public ListaEncadeada<T> add(T a){
            lista.add(a);
            return this;
        }

        public int getSize(){
            return lista.size();
        }
    }
}
