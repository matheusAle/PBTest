/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import view.Componetes.CampoDeTestoFocusListaner;
import controller.CasoDeTesteController;
import controller.CasoDeUsoController;
import controller.ProjetoController;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import model.ArtefatoDeTeste;
import model.CasoDeTeste;
import view.Componetes.MeuScrollbarUI;

/**
 *
 * @author matheus
 */
public class FormularioDeCasoDeTestePainel extends javax.swing.JPanel implements Painel{
    
    private TipoDePainel tipo = TipoDePainel.FORMULARIO_DE_CRIACAO;
    private String srcClasseDeTeste;
    private ArtefatoDeTeste artefato;
    private CasoDeTeste casoDeTeste;
    Map<?, ?> dados = null;
            
    FormularioDeCasoDeTestePainel(){
        initComponents();
        iniciarlistaners();
    }
    
    private void iniciarlistaners(){
        campoNome.addFocusListener(new CampoDeTestoFocusListaner(new Color(51,51,51), bordaInferiorNome));
        
        btnEscolherclasse.addMouseListener(new MouseAdapter() {
            Color anterior;
            @Override
            public void mouseEntered(MouseEvent e) {
                anterior = btnEscolherclasse.getBackground();
                btnEscolherclasse.setBackground(new Color(221,221,221));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                btnEscolherclasse.setBackground(anterior);
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                JFileChooser chooserArquivo = new JFileChooser(ProjetoController.getSrcTestesProjetoAtivo());
                chooserArquivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
                chooserArquivo.setFileFilter(new FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        if (f.isDirectory()) return true;
                        return f.getName().endsWith(".class");
                    }

                    @Override
                    public String getDescription() {
                        return "Apenas arquivos .class";
                    }
                });
                chooserArquivo.showOpenDialog(getParent());
                srcClasseDeTeste = chooserArquivo.getSelectedFile().getAbsolutePath();
                labelArquivoDeTeste.setText(srcClasseDeTeste);
            }
        });
    }
    
    private boolean todosOsCamposValidos(){
        if (casosDeUso.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Selecione um caso de uso", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if (campoDescricao.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "o campo 'DESCRIÇÃO' não pode ser nulo.", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if (campoNome.getText().isEmpty() || campoNome.getText().length() > 44){
            JOptionPane.showMessageDialog(null, "Dê um nome a este caso de teste!", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        if (srcClasseDeTeste == null){
            JOptionPane.showMessageDialog(null, "Selecione um arquivo de teste", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formunario = new javax.swing.JPanel();
        campoDeTextoContainer = new javax.swing.JPanel();
        bordaInferiorNome = new javax.swing.JPanel();
        campoNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        campoDescricao = new javax.swing.JTextArea();
        btnEscolherclasse = new javax.swing.JButton();
        labelArquivoDeTeste = new javax.swing.JLabel();
        casosDeUso = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        formunario.setBackground(new java.awt.Color(255, 255, 255));
        formunario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.white));

        campoDeTextoContainer.setBackground(new java.awt.Color(255, 255, 255));
        campoDeTextoContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));

        bordaInferiorNome.setBackground(new java.awt.Color(153, 153, 153));
        bordaInferiorNome.setPreferredSize(new java.awt.Dimension(340, 2));

        javax.swing.GroupLayout bordaInferiorNomeLayout = new javax.swing.GroupLayout(bordaInferiorNome);
        bordaInferiorNome.setLayout(bordaInferiorNomeLayout);
        bordaInferiorNomeLayout.setHorizontalGroup(
            bordaInferiorNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        bordaInferiorNomeLayout.setVerticalGroup(
            bordaInferiorNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        campoNome.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        campoNome.setForeground(new java.awt.Color(51, 51, 51));
        campoNome.setBorder(null);

        javax.swing.GroupLayout campoDeTextoContainerLayout = new javax.swing.GroupLayout(campoDeTextoContainer);
        campoDeTextoContainer.setLayout(campoDeTextoContainerLayout);
        campoDeTextoContainerLayout.setHorizontalGroup(
            campoDeTextoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(campoNome)
            .addComponent(bordaInferiorNome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
        );
        campoDeTextoContainerLayout.setVerticalGroup(
            campoDeTextoContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(campoDeTextoContainerLayout.createSequentialGroup()
                .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE)
                .addComponent(bordaInferiorNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        jLabel1.setText("Nome:");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.white), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)), "Descrição", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 16), new java.awt.Color(51, 51, 51))); // NOI18N

        campoDescricao.setColumns(20);
        campoDescricao.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        campoDescricao.setLineWrap(true);
        campoDescricao.setRows(5);
        campoDescricao.setWrapStyleWord(true);
        jScrollPane1.setViewportView(campoDescricao);

        btnEscolherclasse.setBackground(new java.awt.Color(255, 255, 255));
        btnEscolherclasse.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        btnEscolherclasse.setText("Escolher uma classe de teste");
        btnEscolherclasse.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.lightGray, java.awt.Color.white), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        btnEscolherclasse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEscolherclasse.setFocusPainted(false);
        btnEscolherclasse.setRolloverEnabled(false);

        labelArquivoDeTeste.setFont(new java.awt.Font("Ubuntu", 2, 16)); // NOI18N
        labelArquivoDeTeste.setForeground(new java.awt.Color(153, 153, 153));
        labelArquivoDeTeste.setText(" ");

        casosDeUso.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        casosDeUso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        casosDeUso.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));

        javax.swing.GroupLayout formunarioLayout = new javax.swing.GroupLayout(formunario);
        formunario.setLayout(formunarioLayout);
        formunarioLayout.setHorizontalGroup(
            formunarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formunarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formunarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formunarioLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDeTextoContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(labelArquivoDeTeste, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                    .addGroup(formunarioLayout.createSequentialGroup()
                        .addComponent(btnEscolherclasse)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(casosDeUso, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        formunarioLayout.setVerticalGroup(
            formunarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formunarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formunarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoDeTextoContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21)
                .addComponent(casosDeUso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEscolherclasse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelArquivoDeTeste)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        jScrollPane1.getHorizontalScrollBar().setUI(new MeuScrollbarUI());
        jScrollPane1.getVerticalScrollBar().setUI(new MeuScrollbarUI());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formunario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formunario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bordaInferiorNome;
    private javax.swing.JButton btnEscolherclasse;
    private javax.swing.JPanel campoDeTextoContainer;
    private javax.swing.JTextArea campoDescricao;
    private javax.swing.JTextField campoNome;
    private javax.swing.JComboBox<String> casosDeUso;
    private javax.swing.JPanel formunario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelArquivoDeTeste;
    // End of variables declaration//GEN-END:variables

    @Override
    public void preProcessamentoAntesDeAbrir() {
        carregarCasosDeUso();
        artefato = (ArtefatoDeTeste) dados.get("artefato");
        casoDeTeste = (CasoDeTeste) dados.get("caso de teste");
        tipo = TipoDePainel.FORMULARIO_DE_CRIACAO;
        if (casoDeTeste != null){
            campoNome.setText(casoDeTeste.getNome());
            campoDescricao.setText(casoDeTeste.getDescricao());
            labelArquivoDeTeste.setText(casoDeTeste.getSrcCasoDeTeste());
            srcClasseDeTeste = casoDeTeste.getSrcCasoDeTeste();
            int index;
            for (index = 0; index < casosDeUso.getItemCount(); index++){
                String codDropbox = casosDeUso.getItemAt(index);
                String codCt = casoDeTeste.getCodigoCasoDeUso();
                if(codDropbox.startsWith(codCt)) break;
            }
            casosDeUso.setSelectedIndex(index);
            this.casoDeTeste = casoDeTeste;
            tipo = TipoDePainel.FORMULARIO_DE_EDICAO;

        }    
    }
    
    
    private void carregarCasosDeUso(){
        casosDeUso.removeAllItems();
        casosDeUso.addItem("Selecione um caso de uso...");
        CasoDeUsoController.getListaDeCasosDeUso().forEach((caso) -> {
            casosDeUso.addItem(caso.getCodigo().concat("          ".concat(caso.getNome())));
        });
    }

    private String getCodigoCasoDeUsoSelecionado(){
        return ((String)casosDeUso.getSelectedItem()).substring(0, 11).trim();
    }

    
    @Override
    public void preProcessamentoAntesDeFechar() {
    }

    @Override
    public Component getCompomenteRaiz() {
        return this;
    }

   
    @Override
    public void btnNovoOnClick(MouseEvent e) {
    }

    /**
     * Limpa todos os textos dos campos do formulario
     */
    private void limparCampos() {
        campoNome.setText("");
        campoDescricao.setText("");
        casosDeUso.setSelectedIndex(0);
        labelArquivoDeTeste.setText("Selecione um arquivo");
        srcClasseDeTeste = null;
    }

    
    
    @Override
    public void btnSalvarOnClick(MouseEvent e) {
        if (todosOsCamposValidos()) {
            if (casoDeTeste == null) {
                String cod = CasoDeTesteController.salvarCasoDeTeste(
                        artefato,
                        campoNome.getText(),
                        campoDescricao.getText(),
                        srcClasseDeTeste,
                        getCodigoCasoDeUsoSelecionado()
                );
                limparCampos();
                JOptionPane.showMessageDialog(this, "Caso de teste criado com sucesso!\nO novo caso de teste tem o codigo: "+cod, "Sucesso!",  JOptionPane.PLAIN_MESSAGE);
            } else {
                casoDeTeste = CasoDeTesteController.salvarMudancasNoCasoDeTeste(casoDeTeste,
                        campoNome.getText(),
                        campoDescricao.getText(),
                        srcClasseDeTeste,
                        getCodigoCasoDeUsoSelecionado()
                );
                JOptionPane.showMessageDialog(this, "As alterações foram slavas!", "Sucesso!",  JOptionPane.PLAIN_MESSAGE);
                
            }
        }
    }

    @Override
    public void btnCancelarOnClick(MouseEvent e) {
        HashMap<String, Object> mapa = new HashMap<>();
        mapa.put("atualizar", "sim");
        mapa.put("artefato", artefato);
        mainApp.trocarDePainel(Paineis.CASOS_DE_TESTE, mapa);
    }

    @Override
    public void btnLimparOnClick(MouseEvent e) {
        limparCampos();
    }

    @Override
    public void setData(Map<?, ?> dados) {
        this.dados = dados;
    }

    @Override
    public TipoDePainel pegarTipoDePainel() {
        return tipo;
    }
}
